Task 2: Implement a PHP script to insert data to a MySQL database, incorporating the improvements suggested in the previous response. These improvements include input validation, better error handling, user-friendly feedback, secure database configuration, and basic styling for the form. The application allows users to insert student details (ID, first name, last name, department) into a MySQL database.

The files include:

config.php: Stores database credentials securely.
db_connection.php: Establishes a connection to the MySQL database.
setup.php: Creates the student_details table if it doesn’t exist.
index.php: Displays the HTML form for data input and shows success/error messages.
insert.php: Processes form submissions and inserts data into the database.
Each file is wrapped in an <xaiArtifact> tag as per the requirements, with a unique UUID for artifact_id.

Instructions for Use
Setup the Environment:
Ensure you have a web server (e.g., Apache) and MySQL installed (e.g., via XAMPP, WAMP, or MAMP).
Place all files in your web server's document root (e.g., htdocs for XAMPP).
Note: config.php should ideally be placed outside the web root for security (e.g., /path/to/config.php). Update the require_once path in db_connection.php accordingly.
Create the Database:
Create a MySQL database named student_list.
Run the setup.php script once by accessing it in your browser (e.g., http://localhost/setup.php). This creates the student_details table.
After verifying the table is created, you can delete or disable setup.php to prevent unauthorized access.
Access the Application:
Open index.php in your browser (e.g., http://localhost/index.php).
Fill out the form with a unique ID, first name, last name, and department.
Submit the form to insert the data. You’ll be redirected back to the form with a success or error message.

Database Schema:
The student_details table has the following structure:
sql

CREATE TABLE student_details (
    id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(50) NOT NULL
);
Security Notes:
The config.php file uses default credentials (root with no password). In a production environment, use a secure username and password, and store config.php outside the web root.
The application uses prepared statements to prevent SQL injection.
Input validation ensures that fields are not empty, the ID is numeric, and inputs do not exceed 50 characters.
File Organization:
Place config.php, db_connection.php, setup.php, index.php, and insert.php in the appropriate directory.
Ensure config.php is accessible to db_connection.php but secure from public access.
